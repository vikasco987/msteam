// export type Task = {
//   id: string;
//   title: string;
//   status: string;
//   createdAt: string;
//   updatedAt?: string;
//   tags: string[];
//   assigneeId?: string;
//   assigneeEmail?: string;
//   assignerEmail?: string;
//   assignerName?: string;
//   customFields?: Record<string, any>;
//   attachments: string[];
//   dueDate?: string;
//   priority?: string;
//   projectId?: string;
//   createdByClerkId: string;

//   subtasks: any[];

//   // ✅ Added for enrichment
//   assignee?: {
//     name: string;
//     email: string;
//   };
// };







// export type CustomFieldValue = string | number | boolean | null | undefined;
// export type CustomFields = { [key: string]: CustomFieldValue };

// export type Subtask = {
//   title: string;
//   isCompleted?: boolean;
// };

// export type Task = {
//   id: string;
//   title: string;
//   status: string;
//   createdAt: string;
//   updatedAt?: string;
//   tags: string[];
//   assigneeId?: string;
//   assigneeEmail?: string;
//   assignerEmail?: string;
//   assignerName?: string;
//   customFields?: CustomFields;
//   attachments: string[];
//   dueDate?: string;
//   priority?: string;
//   projectId?: string;
//   createdByClerkId: string;
//   subtasks: Subtask[];
//   assignee?: {
//     name: string;
//     email: string;
//   };
// };

















// // Define reusable type for custom field values
// export type CustomFieldValue = string | number | boolean | null | undefined;

// // Define custom fields as a dictionary of valid values
// export type CustomFields = {
//   [key: string]: CustomFieldValue;
// };

// // Consolidated and updated Task interface
// export interface Task {
//   id: string;
//   title: string;
//   description?: string; // ✅ Added this line based on your request
//   status: string;
//   tags: string[];
//   dueDate?: string | Date; // Allow both string (for API) and Date (for frontend usage)
//   priority?: string;
//   projectId?: string; // If tasks can belong to projects
//   assignerEmail?: string; // Direct email of the assigner
//   assigneeEmail?: string; // Direct email of the assignee
//   assignerName?: string; // Name of the assigner
//   assigneeName?: string; // Name of the assignee
//   attachments: string[]; // URLs or paths to attachments
//   customFields?: CustomFields; // Using the defined CustomFields type
//   createdAt: string | Date; // Allow both string (for API) and Date
//   updatedAt?: string | Date; // Allow both string (for API) and Date
//   assigneeId?: string; // For single assignee (legacy or alternative)
//   assigneeIds?: string[]; // ✅ This is crucial for multiple assignees

//   createdByClerkId: string; // Clerk ID of the user who created the task

//   // Additional specific fields based on your previous definition
//   phone?: string;
//   email?: string; // Could be customer email, different from assigneeEmail
//   shopName?: string;
//   location?: string;
//   accountNumber?: string;
//   ifscCode?: string;
//   restId?: string; // Assuming restaurant ID
//   customerName?: string;
//   outletName?: string;
//   packageAmount?: string;
//   startDate?: string;
//   endDate?: string;
//   timeline?: string; // A general timeline description or date string

//   // URL fields for documents/images
//   aadhaarUrl?: string;
//   panUrl?: string;
//   selfieUrl?: string;
//   chequeUrl?: string;
//   menuCardUrls?: string[]; // Array for multiple menu card images

//   // Optional for frontend features (nested structures)
//   subtasks?: {
//     title: string;
//     completed: boolean;
//   }[];

//   notes?: {
//     content: string;
//     createdAt: string;
//     authorName?: string;
//     authorEmail?: string;
//   }[];

//   // Optional nested structure for easier rendering of assigner/assignee details
//   // (These might be populated on the frontend after fetching user details)
//   assigner?: { name: string; email: string };
//   assignee?: { name: string; email: string };

//   // If you need a catch-all for other potential properties, though it's less type-safe
//   // [key: string]: any;
// }










// // Define reusable type for custom field values
// export type CustomFieldValue = string | number | boolean | null | undefined;

// // Define custom fields as a dictionary of valid values
// export type CustomFields = {
//   [key: string]: CustomFieldValue;
// };

// // ✅ IMPORTANT: Define and export the Note interface separately
// export interface Note {
//   content: string;
//   createdAt: string;
//   authorName?: string | null; // Allow null as well, given `useUser` can return null for these
//   authorEmail?: string | null; // Allow null as well
//   id?: string; // ID is usually generated by the backend
//   taskId?: string; // Task ID associated with the note
// }

// // Consolidated and updated Task interface
// export interface Task {
//   id: string;
//   title: string;
//   description?: string;
//   status: string;
//   tags: string[];
//   dueDate?: string | Date;
//   priority?: string;
//   projectId?: string; // If tasks can belong to projects
//   assignerEmail?: string;
//   assigneeEmail?: string;
//   assignerName?: string;
//   assigneeName?: string;
//   attachments: string[];
//   customFields?: CustomFields;
//   createdAt: string | Date;
//   updatedAt?: string | Date;
//   assigneeId?: string; // For single assignee (legacy or alternative)
//   assigneeIds?: string[]; // For multiple assignees (Clerk IDs)
//   createdByClerkId: string;

//   phone?: string;
//   email?: string; // Could be customer email, different from assigneeEmail
//   shopName?: string;
//   location?: string;
//   accountNumber?: string;
//   ifscCode?: string;
//   restId?: string; // Assuming restaurant ID
//   customerName?: string;
//   outletName?: string;
//   packageAmount?: string;
//   startDate?: string;
//   endDate?: string;
//   timeline?: string; // A general timeline description or date string

//   // URL fields for documents/images
//   aadhaarUrl?: string;
//   panUrl?: string;
//   selfieUrl?: string;
//   chequeUrl?: string;
//   menuCardUrls?: string[];

//   // Optional for frontend features (nested structures)
//   subtasks?: {
//     title: string;
//     completed: boolean;
//   }[];

//   // ✅ Use the exported Note type here
//   notes?: Note[]; // Now correctly referencing the exported Note interface

//   // Optional nested structure for easier rendering of assigner/assignee details
//   assigner?: { name: string; email: string };
//   assignees?: { name?: string; email?: string }[];
//   assignee?: { name: string; email: string };
// }




































// src/types/task.ts
import { Note } from "../../types/note"; // ✅ Import Note from its dedicated file

// Define reusable type for custom field values
export type CustomFieldValue = string | number | boolean | null | undefined;

// Define custom fields as a dictionary of valid values
export type CustomFields = {
  [key: string]: CustomFieldValue;
};

// Consolidated and updated Task interface
export interface Task {
  id: string;
  title: string;
  description?: string;
  status: string;
  tags: string[];
  dueDate?: string | Date;
  priority?: string;
  projectId?: string; // If tasks can belong to projects
  assignerEmail?: string;
  assigneeEmail?: string;
  assignerName?: string;
  assigneeName?: string;
  attachments: string[];
  customFields?: CustomFields;
  createdAt: string | Date;
  updatedAt?: string | Date;
  assigneeId?: string; // For single assignee (legacy or alternative)
  assigneeIds?: string[]; // For multiple assignees (Clerk IDs)
  createdByClerkId: string;

  phone?: string;
  email?: string; // Could be customer email, different from assigneeEmail
  shopName?: string;
  location?: string;
  accountNumber?: string;
  ifscCode?: string;
  restId?: string; // Assuming restaurant ID
  customerName?: string;
  outletName?: string;
  packageAmount?: string;
  startDate?: string;
  endDate?: string;
  timeline?: string; // A general timeline description or date string

  // URL fields for documents/images
  aadhaarUrl?: string;
  panUrl?: string;
  selfieUrl?: string;
  chequeUrl?: string;
  menuCardUrls?: string[];

  // Optional for frontend features (nested structures)
  subtasks?: {
    title: string;
    completed: boolean;
  }[];

  // ✅ Use the imported Note type here
  notes?: Note[];

  // Optional nested structure for easier rendering of assigner/assignee details
  assigner?: { name: string; email: string };
  assignees?: { name?: string; email?: string }[];
  assignee?: { name: string; email: string };
}