// // components/NotesModal.tsx
// "use client";

// import React, { useEffect, useState, useCallback } from "react";
// import { FaTimes } from "react-icons/fa";
// import { useUser } from "@clerk/nextjs";
// import axios from "axios";

// // Define the interface for a single Note (re-using if possible from types/task.ts)
// interface Note {
//   content: string;
//   createdAt: string;
//   authorName?: string | null;
//   authorEmail?: string | null;
//   id?: string; // ID is usually generated by the backend
//   taskId?: string; // Task ID associated with the note
// }

// // Define the Props interface for NotesModal
// interface NotesModalProps {
//   taskId: string;
//   initialNotes?: Note[]; // Updated prop name to be plural for clarity
//   // onClose can optionally receive a string if a note was saved/updated
//   onClose: (updatedNote?: string) => void;
// }

// export default function NotesModal({ taskId, initialNotes, onClose }: NotesModalProps) {
//   const { user } = useUser();
//   const [notes, setNotes] = useState<Note[]>(initialNotes ? [...initialNotes] : []);
//   const [input, setInput] = useState("");

//   const fetchNotes = useCallback(async () => {
//     try {
//       const res = await axios.get<Note[]>(`/api/notes?taskId=${taskId}`);
//       setNotes(res.data);
//     } catch (error) {
//       console.error("Error fetching notes:", error);
//     }
//   }, [taskId]);

//   useEffect(() => {
//     fetchNotes();
//   }, [fetchNotes]);

//   const addNote = async () => {
//     if (!input.trim()) return;

//     const authorName = `${user?.firstName || ""} ${user?.lastName || ""}`.trim();
//     const authorEmail =
//       user?.primaryEmailAddress?.emailAddress ||
//       user?.emailAddresses?.[0]?.emailAddress ||
//       "unknown@example.com";

//     try {
//       const newNoteData = { // Data to send to the backend
//         taskId,
//         content: input,
//         authorName,
//         authorEmail,
//       };

//       const res = await axios.post<Note>("/api/notes", newNoteData);

//       setInput("");
//       setNotes((prevNotes) => [...prevNotes, res.data]);

//     } catch (error) {
//       console.error("Error adding note:", error);
//     }
//   };

//   return (
//     <div className="fixed inset-0 z-50 bg-black/60 flex justify-center items-center">
//       <div className="bg-white w-[90%] max-w-lg p-4 rounded shadow relative">
//         <button
//           className="absolute top-2 right-2 text-gray-500 hover:text-red-600"
//           // ‚úÖ FIX: Wrap onClose in an arrow function
//           onClick={() => onClose()}
//         >
//           <FaTimes />
//         </button>
//         <h2 className="text-lg font-bold mb-4 flex items-center gap-2">üìù Notes</h2>

//         <div className="space-y-3 max-h-64 overflow-y-auto mb-4 border p-3 rounded bg-gray-50">
//           {notes.length === 0 && (
//             <p className="text-sm text-gray-500 italic">No notes yet.</p>
//           )}
//           {notes.map((note: Note) => (
//             <div key={note.id || note.content + note.createdAt} className="border-b pb-2">
//               <div className="text-xs text-gray-600 mb-1">
//                 <span className="font-semibold">
//                   {note.authorName || note.authorEmail || "Unknown User"}
//                 </span>{" "}
//                 ‚Ä¢ {new Date(note.createdAt).toLocaleString()}
//               </div>
//               <p className="text-sm text-gray-800 whitespace-pre-line">{note.content}</p>
//             </div>
//           ))}
//         </div>

//         <textarea
//           value={input}
//           onChange={(e) => setInput(e.target.value)}
//           placeholder="Write a note..."
//           rows={3}
//           className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-purple-500"
//         />
//         <button
//           onClick={addNote}
//           className="mt-2 bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700 transition"
//         >
//           Add Note
//         </button>
//       </div>
//     </div>
//   );
// }





















// components/NotesModal.tsx
"use client";

import React, { useEffect, useState, useCallback } from "react";
import { FaTimes } from "react-icons/fa";
import { useUser } from "@clerk/nextjs";
import axios from "axios";
// Ensure correct type is imported
// import { Note } from "../../../types/task";
import { Note } from "../../../types/note"; // Use alias path (you can also use relative if needed)
 // Assuming Note interface is defined in types/task.ts as per your provided Task type

// Define the Props interface for NotesModal
interface NotesModalProps {
  taskId: string;
  initialNotes?: Note[]; // Updated prop name to be plural for clarity
  // ‚úÖ FIXED: onClose now expects an array of Note[] or undefined
  onClose: (updatedNotes?: Note[]) => void;
}

export default function NotesModal({ taskId, initialNotes, onClose }: NotesModalProps) {
  const { user } = useUser();
  const [notes, setNotes] = useState<Note[]>(initialNotes ? [...initialNotes] : []);
  const [input, setInput] = useState("");

  const fetchNotes = useCallback(async () => {
    try {
      const res = await axios.get<Note[]>(`/api/notes?taskId=${taskId}`);
      setNotes(res.data);
    } catch (error) {
      console.error("Error fetching notes:", error);
      // Optionally handle error state for UI
    }
  }, [taskId]);

  useEffect(() => {
    fetchNotes();
  }, [fetchNotes]);

  const addNote = async () => {
    if (!input.trim()) return;

    const authorName = `${user?.firstName || ""} ${user?.lastName || ""}`.trim();
    const authorEmail =
      user?.primaryEmailAddress?.emailAddress ||
      user?.emailAddresses?.[0]?.emailAddress ||
      "unknown@example.com";

    try {
      const newNoteData = { // Data to send to the backend
        taskId,
        content: input,
        authorName,
        authorEmail,
      };

      const res = await axios.post<Note>("/api/notes", newNoteData);

      const updatedNotes = [...notes, res.data]; // Create a new array with the added note
      setNotes(updatedNotes); // Update local state
      setInput("");
      
      // ‚úÖ Pass the updated notes array to onClose
      onClose(updatedNotes); 

    } catch (error) {
      console.error("Error adding note:", error);
      // Optionally handle error state for UI
    }
  };

  return (
    <div className="fixed inset-0 z-50 bg-black/60 flex justify-center items-center">
      <div className="bg-white w-[90%] max-w-lg p-4 rounded shadow relative">
        <button
          className="absolute top-2 right-2 text-gray-500 hover:text-red-600"
          // ‚úÖ FIX: Pass the current notes array when closing
          onClick={() => onClose(notes)} 
        >
          <FaTimes />
        </button>
        <h2 className="text-lg font-bold mb-4 flex items-center gap-2">üìù Notes</h2>

        <div className="space-y-3 max-h-64 overflow-y-auto mb-4 border p-3 rounded bg-gray-50">
          {notes.length === 0 && (
            <p className="text-sm text-gray-500 italic">No notes yet.</p>
          )}
          {notes.map((note: Note) => (
            <div key={note.id || note.content + note.createdAt} className="border-b pb-2">
              <div className="text-xs text-gray-600 mb-1">
                <span className="font-semibold">
                  {note.authorName || note.authorEmail || "Unknown User"}
                </span>{" "}
                ‚Ä¢ {new Date(note.createdAt).toLocaleString()}
              </div>
              <p className="text-sm text-gray-800 whitespace-pre-line">{note.content}</p>
            </div>
          ))}
        </div>

        <textarea
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Write a note..."
          rows={3}
          className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-purple-500"
        />
        <button
          onClick={addNote}
          className="mt-2 bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700 transition"
        >
          Add Note
        </button>
      </div>
    </div>
  );
}