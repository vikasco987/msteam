generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Task {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  parentTaskId    String?  
  status          String
  tags            String[] @default([])
  highlightColor  String?

  dueDate         DateTime?
  priority        String?
  projectId       String?

  assignerEmail   String?
  assigneeEmail   String?
  assignerName    String?
  assigneeName    String?
  assigneeId      String?
  assigneeIds     String[] @default([])

  createdByClerkId String
  createdByName    String?      
  createdByEmail   String?      

  attachments     String[] @default([])
  paymentProofs   String[] @default([])

  amount          Float?
  received        Float?

  paymentHistory  Json[] @default([]) // keep for transaction logs
  customFields    Json?

  phone           String?
  email           String?
  shopName        String?
  location        String?
  accountNumber   String?
  ifscCode        String?
  restId          String?
  customerName    String?
  outletName      String?
  packageAmount   String?
  startDate       String?
  endDate         String?
  timeline        String?

  aadhaarUrl      String?
  panUrl          String?
  selfieUrl       String?
  chequeUrl       String?
  menuCardUrls    String[] @default([])

  // Relations
  notes           Note[]
  subtasks        Subtask[]       @relation("TaskSubtasks")
  paymentRemarks  PaymentRemark[] // multiple remarks

  createdAt       DateTime @default(now())
  updatedAt       DateTime?
}

model Subtask {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  completed Boolean @default(false)

  taskId    String @db.ObjectId
  task      Task   @relation("TaskSubtasks", fields: [taskId], references: [id])
}

model Note {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  content      String
  createdAt    DateTime @default(now())

  authorName   String?
  authorEmail  String?

  taskId       String @db.ObjectId
  task         Task   @relation(fields: [taskId], references: [id])
}

model PaymentRemark {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  remark         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime? @updatedAt

  // Author Info
  authorName     String?
  authorEmail    String?
  createdById    String?   

  // Payment Details
  paymentStatus     String?   
  amountDiscussed   Float?    
  amountReceived    Float?    

  // Follow-ups & Deadlines
  nextFollowUpDate  DateTime? 
  followUpStatus    String?   
  pendingDeadline      DateTime?
  pendingDeadlineSet   Boolean  @default(false)

  // Communication
  contactMethod     String?   
  contactedBy       String?   
  contactOutcome    String?    

  // Priority & Reason
  priorityLevel     String?   
  pendingReason     String?   
  customerFeedback  String?   
  internalNotes     String?    

  // Relation to Task
  taskId            String   @db.ObjectId
  task              Task     @relation(fields: [taskId], references: [id])

  // Analytics
  overdueDays       Int?      
  followUpCount     Int?      @default(0)
  reminderSent      Boolean   @default(false)
}

model Goal {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  period          String   @unique
  revenueGoal     Float
  leadsGoal       Int
  collectionGoal  Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String   @unique
  email     String   @unique
  role      String   // "ADMIN", "MASTER", "SELLER"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}    

model Attendance {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String
  employeeName   String?
  faceImage      String?  
  location       Json?
  deviceInfo     String?  
  checkIn        DateTime?
  checkOut       DateTime?
  checkInReason  String?  
  checkOutReason String?  
  date           DateTime @default(now())
  status         String?   
  verified       Boolean   @default(false) 
  workingHours   Float?
  overtimeHours  Float?
  remarks        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model AttendanceSummary {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @unique
  totalDays      Int      @default(0)
  presentDays    Int      @default(0)
  leaveDays      Int      @default(0)
  overtimeHours  Float    @default(0)
  updatedAt      DateTime @updatedAt
}

model Customer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  phone       String   @unique
  email       String?
  remark      String?
  remarks     String[]  @default([]) 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
